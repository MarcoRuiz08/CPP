#include <iostream>
#include <vector>
#include <bits/stdc++.h>


 // Definition for singly-linked list.
  struct ListNode {
      int val;
      ListNode *next;
      ListNode() : val(0), next(nullptr) {}
      ListNode(int x) : val(x), next(nullptr) {}
      ListNode(int x, ListNode *next) : val(x), next(next) {}
  };
 
class Solution {
public:
    ListNode* mergeTwoList(ListNode* l1, ListNode* l2) {
        ListNode *mergeAns;
        
        ListNode *headL1 = l1;
        ListNode *headL2 = l2;

        std::vector<int> v1;

        while(l1 != nullptr){
            v1.push_back(l1->val);
            l1->next = l1->next->next;

            if(l1 == nullptr){
                v1.push_back(l1->val);
            }
        }

        while(l2 != nullptr){
            v1.push_back(l2->val);
            l2->next = l2->next->next;

            if(l2 == nullptr){
                v1.push_back(l2->val);
            }
        }

        std::sort(v1.begin(), v1.end());

        for(auto x : v1)
        {
            std::cout << x << std::endl;
        }

        return mergeAns;
    }
};

int main(){

    ListNode *list1, *list2, *list3;
    ListNode listA, listB, listC;
    ListNode *ptr1 = list1, *ptr2 = &listA;

    list1->val = 3;
    list2->val = 4;
    list3->val = 2;

    listA.val = 4;
    listB.val = 6;
    listC.val = 5;

    list3->next = list2;
    list2->next = list1;
    list1->next = nullptr;

    listA.next = listB.next;
    listB.next = listC.next;
    listC.next = nullptr;

    Solution s1;

    s1.mergeTwoList(ptr1,ptr2);

    return 0;

